---
import { actions, isInputError } from 'astro:actions';
import Input from './Input.astro';

const result = Astro.getActionResult(actions.createLink);
const inputError = isInputError(result?.error) ? result.error.fields : {};

// Estados para feedback
const isSuccess = result && result.data && !result.error;
const hasError = result && result.error;
---

<!-- Contenedor principal con mensajes arriba del formulario -->
<div class="w-full max-w-2xl space-y-4">
  <!-- Mensaje de √©xito -->{
    isSuccess && (
      <div class="p-4 sm:p-6 bg-green-50 dark:bg-green-900/20 border-2 border-green-200 dark:border-green-800 rounded-xl shadow-sm">
        <div class="flex items-start gap-3 sm:gap-4">
          {/* √çcono */}
          <div class="flex-shrink-0 mt-0.5">
            <div class="w-8 h-8 sm:w-10 sm:h-10 bg-green-100 dark:bg-green-800/50 rounded-full flex items-center justify-center">
              <svg
                class="w-5 h-5 sm:w-6 sm:h-6 text-green-600 dark:text-green-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M5 13l4 4L19 7"
                />
              </svg>
            </div>
          </div>

          {/* Contenido */}
          <div class="flex-1 min-w-0">
            <h3 class="text-base sm:text-lg font-semibold text-green-800 dark:text-green-200 mb-2">
              ¬°Enlace creado exitosamente!
            </h3>
            <div class="space-y-2">
              <p class="text-sm text-green-700 dark:text-green-300">
                Tu enlace acortado est√° listo para usar:
              </p>
              <div class="flex items-center gap-2 p-3 bg-white dark:bg-green-950/30 rounded-lg border border-green-200 dark:border-green-800">
                <code class="flex-1 text-sm sm:text-base font-mono text-green-800 dark:text-green-200 break-all">
                  /{result.data.shortCode}
                </code>
              </div>
            </div>
          </div>
        </div>
      </div>
    )
  }

  <!-- Mensaje de error -->
  {
    hasError && (
      <div class="p-4 sm:p-6 bg-red-50 dark:bg-red-900/20 border-2 border-red-200 dark:border-red-800 rounded-xl shadow-sm">
        <div class="flex items-start gap-3 sm:gap-4">
          {/* √çcono */}
          <div class="flex-shrink-0 mt-0.5">
            <div class="w-8 h-8 sm:w-10 sm:h-10 bg-red-100 dark:bg-red-800/50 rounded-full flex items-center justify-center">
              <svg
                class="w-5 h-5 sm:w-6 sm:h-6 text-red-600 dark:text-red-400"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                />
              </svg>
            </div>
          </div>

          {/* Contenido */}
          <div class="flex-1 min-w-0">
            <h3 class="text-base sm:text-lg font-semibold text-red-800 dark:text-red-200 mb-2">
              Error al crear enlace
            </h3>
            <div class="space-y-2">
              <p class="text-sm sm:text-base text-red-700 dark:text-red-300 leading-relaxed break-words">
                {result.error.message || 'Ha ocurrido un error inesperado'}
              </p>
              {/* Si el mensaje contiene un shortCode, resaltarlo */}
              {result.error.message?.includes('/') && (
                <div class="flex items-start gap-2 p-3 bg-red-100/50 dark:bg-red-950/30 rounded-lg border border-red-200 dark:border-red-800">
                  <svg
                    class="w-4 h-4 text-red-600 dark:text-red-400 mt-0.5 flex-shrink-0"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                    />
                  </svg>
                  <p class="text-xs sm:text-sm text-red-600 dark:text-red-400 leading-relaxed">
                    Puedes usar el enlace existente o probar con una URL
                    diferente.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    )
  }

  <!-- Formulario -->
  <form
    method="POST"
    action={actions.createLink}
    class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl sm:rounded-2xl shadow-xl p-4 sm:p-6 md:p-8 space-y-4 sm:space-y-6 transition-all hover:shadow-2xl"
    id="link-form"
  >
    <Input
      id="link-url"
      name="originalUrl"
      icon="link"
      type="url"
      placeholder="https://tuenlace.com"
      required={true}
      error={inputError.originalUrl}
    />

    <Input
      id="custom-code"
      name="shortCode"
      icon="pencil"
      type="text"
      placeholder="mi-enlace-personalizado (opcional)"
      required={false}
      error={inputError.shortCode}
    />

    <button
      type="submit"
      id="submit-btn"
      class="w-full text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-all duration-200"
    >
      <span id="btn-text">üîó Acortar enlace</span>
      <span id="btn-loading" class="hidden">
        <svg
          class="inline w-4 h-4 mr-2 animate-spin"
          viewBox="0 0 24 24"
          fill="none"
        >
          <circle
            class="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            stroke-width="4"></circle>
          <path
            class="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          ></path>
        </svg>
        Procesando...
      </span>
    </button>

    <script>
      // Esperar a que el DOM est√© listo
      document.addEventListener('DOMContentLoaded', function () {
        const form = document.getElementById('link-form') as HTMLFormElement;
        const btn = document.getElementById('submit-btn') as HTMLButtonElement;
        const btnText = document.getElementById('btn-text') as HTMLSpanElement;
        const btnLoading = document.getElementById(
          'btn-loading'
        ) as HTMLSpanElement;

        if (!form || !btn || !btnText || !btnLoading) return;

        let isSubmitting = false;

        form.addEventListener('submit', function (e) {
          // Prevenir m√∫ltiples env√≠os
          if (isSubmitting || btn.disabled) {
            e.preventDefault();
            return false;
          }

          // Cambiar estado
          isSubmitting = true;
          btn.disabled = true;
          btn.classList.add('opacity-75', 'cursor-not-allowed');
          btn.classList.remove('hover:bg-blue-800', 'dark:hover:bg-blue-700');

          // Cambiar contenido
          btnText.classList.add('hidden');
          btnLoading.classList.remove('hidden');

          // Safety reset (evita que se quede bloqueado)
          setTimeout(() => {
            resetButton();
          }, 15000);
        });

        function resetButton() {
          isSubmitting = false;
          btn.disabled = false;
          btn.classList.remove('opacity-75', 'cursor-not-allowed');
          btn.classList.add('hover:bg-blue-800', 'dark:hover:bg-blue-700');
          btnText.classList.remove('hidden');
          btnLoading.classList.add('hidden');
        }

        // Auto-reset si la p√°gina tiene resultado
        if (document.querySelector('.bg-green-50, .bg-red-50')) {
          setTimeout(resetButton, 100);
        }
      });
    </script>

    <style>
      @keyframes spin {
        from {
          transform: rotate(0deg);
        }
        to {
          transform: rotate(360deg);
        }
      }

      .animate-spin {
        animation: spin 1s linear infinite;
      }

      button:disabled {
        pointer-events: none !important;
      }
    </style>
  </form>
</div>

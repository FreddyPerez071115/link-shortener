---
import { actions, isInputError } from 'astro:actions';
import Input from './Input.astro';

const result = Astro.getActionResult(actions.createLink);

const inputError = isInputError(result?.error) ? result.error.fields : {};

// Estados para feedback
const isSuccess = result && result.data && !result.error;
const hasError = result && result.error;
---

<div class="w-full max-w-2xl space-y-4">
  <!-- Mensaje de éxito -->{
    isSuccess && (
      <div class="p-3 bg-green-50 dark:bg-green-900/20 border-l-4 border-green-500 rounded">
        <div class="flex items-center gap-2">
          <svg
            class="w-5 h-5 text-green-600 dark:text-green-400 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M5 13l4 4L19 7"
            />
          </svg>
          <p class="text-sm font-medium text-green-800 dark:text-green-200">
            Enlace creado exitosamente
          </p>
        </div>
      </div>
    )
  }

  <!-- Mensaje de error -->
  {
    hasError && (
      <div class="p-3 bg-red-50 dark:bg-red-900/20 border-l-4 border-red-500 rounded">
        <div class="flex items-center gap-2">
          <svg
            class="w-5 h-5 text-red-600 dark:text-red-400 flex-shrink-0"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
            />
          </svg>
          <p class="text-sm font-medium text-red-800 dark:text-red-200">
            {result.error.code === 'CONFLICT'
              ? 'Esta URL ya está registrada'
              : 'Error al crear el enlace'}
          </p>
        </div>
      </div>
    )
  }

  <!-- Formulario -->
  <form
    method="POST"
    action={actions.createLink}
    id="link-form"
    class="bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-xl sm:rounded-2xl shadow-xl p-4 sm:p-6 md:p-8 space-y-4 sm:space-y-6 transition-all hover:shadow-2xl"
  >
    <Input
      id="link-url"
      name="originalUrl"
      icon="link"
      type="url"
      placeholder="https://tuenlace.com"
      required={true}
      error={inputError.originalUrl}
    />

    <Input
      id="custom-code"
      name="shortCode"
      icon="pencil"
      type="text"
      placeholder="mi-enlace (opcional)"
      required={false}
      maxlength={10}
      helpText="Máximo 10 caracteres. Solo letras, números y guiones"
      error={inputError.shortCode}
    />

    <button
      type="submit"
      id="submit-btn"
      data-default-text="Acortar enlace"
      data-loading-text="Cargando..."
      class="w-full text-white bg-blue-700 hover:bg-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300 font-medium rounded-full text-sm px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
    >
      🔗 Acortar enlace
    </button>
  </form>
</div>

<script>
  (function () {
    'use strict';

    let isSubmitting = false;

    function setupForm() {
      const form = document.getElementById('link-form');
      const btn = document.getElementById('submit-btn');

      if (!form || !btn) {
        console.warn('Form o button no encontrado');
        return;
      }

      // Remueve listeners antiguos
      const newForm = form.cloneNode(true);
      form.parentNode?.replaceChild(newForm, form);

      const actualForm = document.getElementById('link-form');
      const actualBtn = document.getElementById(
        'submit-btn'
      ) as HTMLButtonElement;

      if (!actualForm || !actualBtn) return;

      actualForm.addEventListener('submit', function (e) {
        if (isSubmitting || actualBtn.disabled) {
          e.preventDefault();
          return false;
        }

        isSubmitting = true;
        actualBtn.disabled = true;
        actualBtn.textContent = '⏳ Cargando...';
        actualBtn.style.opacity = '0.6';
        actualBtn.style.cursor = 'not-allowed';

        // Timeout de seguridad por si falla la petición
        setTimeout(() => {
          isSubmitting = false;
        }, 1000);
      });

      // Limpia URL después de que Astro procese el result
      if (window.location.search.includes('_action=')) {
        requestAnimationFrame(() => {
          const cleanUrl = window.location.pathname + window.location.hash;
          window.history.replaceState(null, '', cleanUrl);
        });
      }

      // Resetea el estado si hubo error
      const hasError = document.querySelector('.error-message');
      if (hasError) {
        isSubmitting = false;
        actualBtn.disabled = false;
        actualBtn.textContent = 'Crear Link';
        actualBtn.style.opacity = '1';
        actualBtn.style.cursor = 'pointer';
      }
    }

    // Setup inicial
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', setupForm);
    } else {
      setupForm();
    }

    // Re-setup en cada navegación
    document.addEventListener('astro:page-load', setupForm);

    // Backup: observa cambios en el DOM
    const observer = new MutationObserver(() => {
      const form = document.getElementById('link-form');
      const btn = document.getElementById('submit-btn');
      if (form && btn && !btn.dataset.initialized) {
        btn.dataset.initialized = 'true';
        setupForm();
      }
    });

    if (document.body) {
      observer.observe(document.body, { childList: true, subtree: true });
    }
  })();
</script>
